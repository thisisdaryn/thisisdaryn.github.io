[
["index.html", "ggg Examples", " ggg Daryn Ramsden 2019-08-14 Examples "],
["lara.html", "Brian Lara’s runs in test cricket by Opponent", " Brian Lara’s runs in test cricket by Opponent Data This plot uses the lara_tests data frame of the gcubed package. head(lara_tests) ## # A tibble: 6 x 8 ## Runs Inning Notout DNB Opp Ground `Start Date` MatchNum ## &lt;int&gt; &lt;fct&gt; &lt;lgl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 44 1 FALSE FALSE Pakistan Lahore 6-Dec-90 1158 ## 2 5 2 FALSE FALSE Pakistan Lahore 6-Dec-90 1158 ## 3 17 1 FALSE FALSE South Africa Bridgetown 18-Apr-92 1188 ## 4 64 2 FALSE FALSE South Africa Bridgetown 18-Apr-92 1188 ## 5 58 1 FALSE FALSE Australia Brisbane 27-Nov-92 1202 ## 6 0 2 FALSE FALSE Australia Brisbane 27-Nov-92 1202 Code for plot First, create a data frame aggregating runs by opponent. (Note that this can also be done using the aggregate function of base R): library(dplyr) df &lt;- group_by(lara_tests, Opp) %&gt;% summarise(Runs = sum(Runs, na.rm = TRUE)) %&gt;% arrange(desc(Runs)) head(df) ## # A tibble: 6 x 2 ## Opp Runs ## &lt;chr&gt; &lt;int&gt; ## 1 England 2983 ## 2 Australia 2856 ## 3 South Africa 1715 ## 4 Pakistan 1173 ## 5 Sri Lanka 1125 ## 6 India 1002 library(ggplot2) library(scales) #to get commas in formatting numerical values on the y-axis df$Opp &lt;- factor(df$Opp, levels =df$Opp) bcl_runs_plt &lt;- ggplot(df, aes(x = Opp, y = Runs)) + geom_bar(stat = &quot;identity&quot;, fill = &quot;mediumpurple&quot;, colour = &quot;black&quot;) + xlab(&quot;Opponent&quot;) + ggtitle(&quot;Brian Lara Test Career (1990-2006)&quot;)+ scale_y_continuous(label = comma)+ theme( plot.title = element_text(size = 16, face = &quot;bold&quot;, hjust = 0.5)) bcl_runs_plt "],
["djokovicnadal.html", "Djokovic vs Nadal Head-to-head", " Djokovic vs Nadal Head-to-head Data This plot uses the rafa_novak data frame from the gcubed library. This data frame has one row for every match played between Novak Djokovic and Rafael Nadal over the course of their professional careers. In particular, the column Winner has the name of the winner of the match. head(rafa_novak) ## # A tibble: 6 x 8 ## Year Event Location Surface RND Winner Result Loser ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 2019 ATP Masters… Italy Outdoor … F Rafael … 60 46 61 Novak D… ## 2 2019 Australian … Australia Outdoor … F Novak D… 63 62 63 Rafael … ## 3 2018 Wimbledon Great Bri… Outdoor … SF Novak D… 64 36 76… Rafael … ## 4 2018 ATP Masters… Italy Outdoor … SF Rafael … 764 63 Novak D… ## 5 2017 ATP Masters… Spain Outdoor … SF Rafael … 62 64 Novak D… ## 6 2016 ATP Masters… Italy Outdoor … QF Novak D… 75 764 Rafael … This data frame is already suitable for making the plot. Code rafa_novak_plt &lt;- ggplot(rafa_novak, aes(x = Surface, fill = Winner)) + geom_bar(position = &quot;dodge&quot;) + ylab(&quot;Wins&quot;) + ggtitle(&quot;Djokovic vs Nadal Head-to-Head&quot;) + theme_bw() + theme(panel.grid.major.x = element_blank(), plot.title = element_text(size = 16, face = &quot;bold&quot;, hjust = 0.5)) rafa_novak_plt "],
["lebron.html", "LeBron James Career Minutes", " LeBron James Career Minutes Data This plot uses the lebron_mp data frame from the gcubed library. This data frame has columns MPR and MPP for minutes played by LeBron James during the regular season and playoffs respectively of the corresponding season. head(lebron_mp) ## # A tibble: 6 x 3 ## Season MPR MPP ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2003-04 3122 0 ## 2 2004-05 3388 0 ## 3 2005-06 3361 604 ## 4 2006-07 3190 893 ## 5 2007-08 3027 552 ## 6 2008-09 3054 580 Code for plot First, add columns for cumulative career minutes for both playoffs and the regular season. library(dplyr) df &lt;- mutate(lebron_mp, Playoffs = cumsum(MPP), `Reg Season` = cumsum(MPR)) head(df) ## # A tibble: 6 x 5 ## Season MPR MPP Playoffs `Reg Season` ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2003-04 3122 0 0 3122 ## 2 2004-05 3388 0 0 6510 ## 3 2005-06 3361 604 604 9871 ## 4 2006-07 3190 893 1497 13061 ## 5 2007-08 3027 552 2049 16088 ## 6 2008-09 3054 580 2629 19142 library(tidyr) df &lt;- gather(df, key = RegPlayoffs, value = MP, Playoffs:`Reg Season`) head(df) ## # A tibble: 6 x 5 ## Season MPR MPP RegPlayoffs MP ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 2003-04 3122 0 Playoffs 0 ## 2 2004-05 3388 0 Playoffs 0 ## 3 2005-06 3361 604 Playoffs 604 ## 4 2006-07 3190 893 Playoffs 1497 ## 5 2007-08 3027 552 Playoffs 2049 ## 6 2008-09 3054 580 Playoffs 2629 library(ggplot2) library(scales) lbj_plt &lt;- ggplot(df, aes(x = Season, y = MP, fill = RegPlayoffs)) + geom_bar(stat = &quot;identity&quot;) + scale_fill_manual(values = c(&quot;#D9717D&quot;, &quot;#4DB6D0&quot;)) + scale_y_continuous(label=comma, limits = c(0,70000)) + theme_bw() + #change the background colour to white theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text.x = element_text(angle = 90), plot.title = element_text(size = 18, face = &quot;bold&quot;, hjust = 0.5), legend.title = element_blank() )+ ylab(&quot;Cumulative Minutes&quot;) + ggtitle(&quot;LeBron James Career Minutes Played&quot;) lbj_plt Adding annotations for other significant NBA players: lbj_plt &lt;- lbj_plt + geom_segment(x = 12, xend = 17, y=66297, yend = 66297, linetype=&quot;dashed&quot;) + geom_text(aes(14,66297,label = &quot;Kareem Abdul-Jabbar&quot;, vjust = -1)) + geom_segment(x = 8, xend = 17, y = 62759, yend = 62759, linetype=&quot;dashed&quot;) + geom_text(aes(9,62759,label = &quot;Karl Malone&quot;, vjust = -1)) + geom_segment(x = 5, xend = 17, y = 57278, yend = 57278, linetype=&quot;dashed&quot;) + geom_text(aes(6,57278,label = &quot;Kobe Bryant&quot;, vjust = -1)) + geom_segment(x = 5, xend = 17, y = 56738, yend = 56738, linetype=&quot;dashed&quot;) + geom_text(aes(6,56738,label = &quot;Tim Duncan&quot;, vjust = 1.5)) + geom_segment(x = 1, xend = 17, y = 50016, yend = 50016, linetype=&quot;dashed&quot;) + geom_text(aes(2.5,50016,label = &quot;Shaquille O&#39;Neal&quot;, vjust = -1)) + geom_segment(x = 1, xend = 17, y = 48485, yend = 48485, linetype=&quot;dashed&quot;) + geom_text(aes(2.4,48485,label = &quot;Michael Jordan&quot;, vjust = 1.5)) + geom_segment(x = 7.2, xend = 17, y = 41329, yend = 41329, linetype=&quot;dashed&quot;) + geom_text(aes(8,41329,label = &quot;Larry Bird&quot;, vjust = -1)) + geom_segment(x = 7.2, xend = 17, y = 40783, yend = 40783, linetype=&quot;dashed&quot;) + geom_text(aes(8.5,40783,label = &quot;Magic Johnson&quot;, vjust = 1.5)) lbj_plt 0.0.0.0.1 Code for complete plot lbj_plt &lt;- ggplot(df, aes(x = Season, y = MP, fill = RegPlayoffs)) + geom_bar(stat = &quot;identity&quot;) + scale_fill_manual(values = c(&quot;#D9717D&quot;, &quot;#4DB6D0&quot;)) + scale_y_continuous(label=comma, limits = c(0,70000)) + theme_bw() + #change the background colour to white theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.text.x = element_text(angle = 90), plot.title = element_text(size = 18, face = &quot;bold&quot;, hjust = 0.5), legend.title = element_blank() )+ ylab(&quot;Cumulative Minutes&quot;) + ggtitle(&quot;LeBron James Career Minutes Played&quot;) + geom_segment(x = 12, xend = 17, y=66297, yend = 66297, linetype=&quot;dashed&quot;) + geom_text(aes(14,66297,label = &quot;Kareem Abdul-Jabbar&quot;, vjust = -1)) + geom_segment(x = 8, xend = 17, y = 62759, yend = 62759, linetype=&quot;dashed&quot;) + geom_text(aes(9,62759,label = &quot;Karl Malone&quot;, vjust = -1)) + geom_segment(x = 5, xend = 17, y = 57278, yend = 57278, linetype=&quot;dashed&quot;) + geom_text(aes(6,57278,label = &quot;Kobe Bryant&quot;, vjust = -1)) + geom_segment(x = 5, xend = 17, y = 56738, yend = 56738, linetype=&quot;dashed&quot;) + geom_text(aes(6,56738,label = &quot;Tim Duncan&quot;, vjust = 1.5)) + geom_segment(x = 1, xend = 17, y = 50016, yend = 50016, linetype=&quot;dashed&quot;) + geom_text(aes(2.5,50016,label = &quot;Shaquille O&#39;Neal&quot;, vjust = -1)) + geom_segment(x = 1, xend = 17, y = 48485, yend = 48485, linetype=&quot;dashed&quot;) + geom_text(aes(2.4,48485,label = &quot;Michael Jordan&quot;, vjust = 1.5)) + geom_segment(x = 7.2, xend = 17, y = 41329, yend = 41329, linetype=&quot;dashed&quot;) + geom_text(aes(8,41329,label = &quot;Larry Bird&quot;, vjust = -1)) + geom_segment(x = 7.2, xend = 17, y = 40783, yend = 40783, linetype=&quot;dashed&quot;) + geom_text(aes(8.5,40783,label = &quot;Magic Johnson&quot;, vjust = 1.5)) "],
["energy18.html", "Global Energy Consumption 2018", " Global Energy Consumption 2018 Data This plot uses the energy18 data frame of the gcubed package. head(energy18) ## # A tibble: 6 x 8 ## Countries Oil `Natural Gas` Coal Nuclear Hydroelectric Renewable ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Canada 110 99.5 14.4 22.6 87.6 10.3 ## 2 Mexico 82.8 77 11.9 3.1 7.3 4.8 ## 3 US 920. 703. 317 192. 65.3 104. ## 4 Argentina 30.1 41.9 1.2 1.6 9.4 0.9 ## 5 Brazil 136. 30.9 15.9 3.5 87.7 23.6 ## 6 Chile 18.1 5.5 7.7 0 5.2 3.5 ## # … with 1 more variable: Region &lt;chr&gt; First get totals for each energy source (natural gas, oil, coal, nuclear, hydroelectric, renewable) for each region: library(dplyr) df &lt;- group_by(energy18, Region) %&gt;% summarise(Oil = sum(Oil), `Natural Gas` = sum(`Natural Gas`), Coal = sum(Coal), Nuclear = sum(Nuclear), Hydroelectric = sum(Hydroelectric), Renewable = sum(Renewable)) head(df) ## # A tibble: 6 x 7 ## Region Oil `Natural Gas` Coal Nuclear Hydroelectric Renewable ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Africa 191. 129. 101. 2.5 30.1 7.2 ## 2 Asia Pacific 1695. 710. 2841. 125. 389. 225. ## 3 CIS 194. 499. 135. 46.8 55.4 0.5 ## 4 Europe 742. 472. 307. 212. 145. 172. ## 5 Middle East 412 475. 8.1 1.6 3.4 1.6 ## 6 North America 1112. 879. 343. 218. 160. 119. Now use the gather command of the tidyr package to get all the energy values into the same column while creating an accompanying column to indicate the energy source. library(tidyr) df &lt;- gather(df, key = Type, value = Energy, -1) head(df) ## # A tibble: 6 x 3 ## Region Type Energy ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Africa Oil 191. ## 2 Asia Pacific Oil 1695. ## 3 CIS Oil 194. ## 4 Europe Oil 742. ## 5 Middle East Oil 412 ## 6 North America Oil 1112. The df data frame is now suitable for making the plot. Code library(ggplot2) library(scales) #for formatting the axes labels to have commas e.g. 1,000 df$Type &lt;- factor(df$Type) energy_plt &lt;- ggplot(df, aes(Type, Energy, fill = Type)) + geom_bar(stat = &quot;identity&quot;) + facet_wrap(~Region, ncol = 2, scale = &quot;free&quot;) + coord_flip() + scale_x_discrete(limits = rev(levels(df$Type))) + scale_y_continuous(label = comma) + xlab(&quot;&quot;) + ylab(&quot;Million tonnes oil equivalent&quot;) + theme(plot.title = element_text(size = 16, face = &quot;bold&quot;, hjust = 0.5), legend.title = element_blank()) + ggtitle(&quot;Global Energy Consumption (2018)&quot;) energy_plt "],
["iris.html", "Iris Data Set", " Iris Data Set Data This plot uses the iris data set that comes with R. This data frame contains the widths and lengths of the petals and sepals of 150 iris flowers. The flowers are of three different species: setosa, versicolor and virginica. There are 50 specimens of each species. head(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa Code for plot iris_petal_plot &lt;- ggplot(data = iris, aes(x = Petal.Width, y = Petal.Length, colour = Species)) + geom_point() + theme_bw() + xlab(&quot;Petal Width (cm)&quot;) + ylab(&quot;Petal Length (cm)&quot;) + ggtitle(&quot;Petals of the iris data set&quot;) + theme(plot.title = element_text(size = 16, face = &quot;bold&quot;, hjust = 0.5)) iris_petal_plot "],
["unemp.html", "10 Yr History of US Unemployment: Line Chart", " 10 Yr History of US Unemployment: Line Chart Data This plot uses the us_unemp data frame of the gcubed package. This data frame contains unemployment rates for the United States published by the Bureau of Labor and Statistics. Rates are published monthly. head(us_unemp) ## # A tibble: 6 x 2 ## Date Rate ## &lt;date&gt; &lt;dbl&gt; ## 1 2010-01-01 9.8 ## 2 2010-02-01 9.8 ## 3 2010-03-01 9.9 ## 4 2010-04-01 9.9 ## 5 2010-05-01 9.6 ## 6 2010-06-01 9.4 Code for plot This plot uses geom_line to create a line chart. unemp_plt &lt;- ggplot(us_unemp, aes(x = Date, y = Rate)) + geom_line() + ggtitle(&quot;10 Year History of US Unemployment Rates (2004 - 2019)&quot;) unemp_plt "],
["unempp.html", "10 Yr History of US Unemployment: Line and Point plot", " 10 Yr History of US Unemployment: Line and Point plot Data This plot uses the us_unemp data frame of the gcubed package. This data frame contains unemployment rates for the United States published by the Bureau of Labor and Statistics. Rates are published monthly. head(us_unemp) ## # A tibble: 6 x 2 ## Date Rate ## &lt;date&gt; &lt;dbl&gt; ## 1 2010-01-01 9.8 ## 2 2010-02-01 9.8 ## 3 2010-03-01 9.9 ## 4 2010-04-01 9.9 ## 5 2010-05-01 9.6 ## 6 2010-06-01 9.4 Code for plot This plot uses geom_line (to create the line chart) and geom_point to highlight the data points simultaneously. unemp_ptline_plt &lt;- ggplot(us_unemp, aes(x = Date, y = Rate)) + geom_line() + geom_point() + ggtitle(&quot;10 Year History of US Unemployment Rates (2004 - 2019)&quot;) + theme_bw() unemp_ptline_plt "],
["unemppp.html", "10 Yr History of US Unemployment: Lollipop chart", " 10 Yr History of US Unemployment: Lollipop chart Data This plot uses the us_unemp data frame of the gcubed package. This data frame contains unemployment rates for the United States published by the Bureau of Labor and Statistics. Rates are published monthly. head(us_unemp) ## # A tibble: 6 x 2 ## Date Rate ## &lt;date&gt; &lt;dbl&gt; ## 1 2010-01-01 9.8 ## 2 2010-02-01 9.8 ## 3 2010-03-01 9.9 ## 4 2010-04-01 9.9 ## 5 2010-05-01 9.6 ## 6 2010-06-01 9.4 Code for plot unemp_plt &lt;- ggplot(us_unemp, aes(x = Date, y = Rate)) + geom_point() + geom_segment(aes(x = Date, xend = Date, y = 0, yend = Rate)) + ggtitle(&quot;10 Year History of US Unemployment Rates (2004 - 2019)&quot;) + theme_bw() unemp_plt "],
["unempppp.html", "10 Yr History of US Unemployment: Step Plot", " 10 Yr History of US Unemployment: Step Plot Data This plot uses the us_unemp data frame of the gcubed package. This data frame contains unemployment rates for the United States published by the Bureau of Labor and Statistics. Rates are published monthly. head(us_unemp) ## # A tibble: 6 x 2 ## Date Rate ## &lt;date&gt; &lt;dbl&gt; ## 1 2010-01-01 9.8 ## 2 2010-02-01 9.8 ## 3 2010-03-01 9.9 ## 4 2010-04-01 9.9 ## 5 2010-05-01 9.6 ## 6 2010-06-01 9.4 Code for plot This plot uses the geom_step geometry to get a step function appearance as opposed to the look of using geom_line. unemp_step_plt &lt;- ggplot(us_unemp, aes(x = Date, y = Rate)) + geom_step() + ggtitle(&quot;10 Year History of US Unemployment Rates (2004 - 2019)&quot;) unemp_step_plt "],
["lex.html", "Global life expectancy: Line chart", " Global life expectancy: Line chart Data This plot uses the life_ex data frame of the gcubed package. This data frame contains life expectancy data for numerous countries and groups of countries in the Entity column. head(life_ex) ## # A tibble: 6 x 4 ## Entity Code Year LE ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Afghanistan AFG 1950 27.5 ## 2 Afghanistan AFG 1951 27.8 ## 3 Afghanistan AFG 1952 28.4 ## 4 Afghanistan AFG 1953 28.9 ## 5 Afghanistan AFG 1954 29.4 ## 6 Afghanistan AFG 1955 29.9 Code for plot First, we will restrict the data set to only those rows that contain the life expectancy values for the country groups we are interested in. (Note that this filtering of rows could also have been done using base R.) groups &lt;- c(&quot;Upper-middle-income countries&quot;, &quot;Middle-income countries&quot;, &quot;Low-income countries&quot;, &quot;Lower-middle-income countries&quot;,&quot;High-income countries&quot;) library(dplyr) df &lt;- filter(life_ex, Entity %in% groups) head(df) ## # A tibble: 6 x 4 ## Entity Code Year LE ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 High-income countries &lt;NA&gt; 1950 64.3 ## 2 High-income countries &lt;NA&gt; 1951 64.6 ## 3 High-income countries &lt;NA&gt; 1952 65.1 ## 4 High-income countries &lt;NA&gt; 1953 65.5 ## 5 High-income countries &lt;NA&gt; 1954 66.0 ## 6 High-income countries &lt;NA&gt; 1955 66.4 The data is already in the correct shape to be used by geom_line: all the life expectancy values are in the single column, LE. To get different lines for each income group, the group aesthetic is used in the creation of the ggplot object. To give each line a different colour, the colour aesthetic is used. le_plt &lt;- ggplot(df, aes(x = Year, y = LE, group = Entity, colour = Entity)) + geom_line() + ylab(&quot;Life Expectancy (Years)&quot;) + ggtitle(&quot;Global Life Expectancy (1960 - 2015)&quot;) + theme(legend.title = element_blank()) le_plt We can reorder the country groups so that the legend shows in the same order that the lines do in the plot. group_order &lt;- c(&quot;High-income countries&quot;, &quot;Upper-middle-income countries&quot;, &quot;Middle-income countries&quot;,&quot;Lower-middle-income countries&quot;, &quot;Low-income countries&quot;) df$Entity &lt;- factor(df$Entity, levels = group_order) le_plt &lt;- ggplot(df, aes(x = Year, y = LE, group = Entity, colour = Entity)) + geom_line() + ylab(&quot;Life Expectancy (Years)&quot;) + ggtitle(&quot;Global Life Expectancy (1960 - 2015)&quot;) + theme(legend.title = element_blank()) le_plt "],
["apple.html", "Apple Inc Revenue", " Apple Inc Revenue Data This plot uses the apple data frame of the gcubed package. This data frame contains the revenue (in millions of dollars) for each of Apple’s product lines for the period 2015 to 2018. head(apple) ## # A tibble: 6 x 5 ## Year Quarter Product Units Revenue ## &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2015 1 iPad 21419 8985 ## 2 2015 1 iPhone 74468 51182 ## 3 2015 1 Mac 5519 6944 ## 4 2015 1 Other Products NA 2689 ## 5 2015 1 Services NA 4799 ## 6 2015 2 iPad 12623 5428 Code for plot The code makes use of both geom_point and geom_line as well as group and colour aesthetics. library(ggplot2) library(scales) #for formatting the numerical y-axis values apple_rev_plot &lt;- ggplot(data = apple, aes(x = paste(Year, Quarter, sep = &quot; Q&quot;), y = Revenue, group = Product, colour = Product)) + geom_point() + geom_line() + ggtitle(&quot;Apple Inc. Revenue (2015 - 2018)&quot;) + ylab(&quot;Revenue (millions of $)&quot;) + theme_bw() + scale_y_continuous(label=comma) + theme(axis.text.x = element_text(angle = 90), axis.title.x = element_blank(), plot.title = element_text(size = 16, face = &quot;bold&quot;, hjust = 0.5)) apple_rev_plot "],
["budget.html", "Budget Surplus or Deficit", " Budget Surplus or Deficit Data This plot uses the budget data frame of the gcubed package. In particular, the columns Year and SurpDef_pg are used. SurpDef_pg represents the surplus/deficit as a percentage of the US GDP for the given year. Some rows of the data frame are shown below. budget[budget$Year %in% c(1970, 1980, 1990, 2000, 2010), c(&quot;Year&quot;, &quot;SurpDef_pg&quot;)] ## # A tibble: 5 x 2 ## Year SurpDef_pg ## &lt;dbl&gt; &lt;dbl&gt; ## 1 1970 -0.3 ## 2 1980 -2.6 ## 3 1990 -3.7 ## 4 2000 2.3 ## 5 2010 -8.7 Code First, we make a plot using geom_line. geom_hline is also used to create the x-axis. df &lt;- budget[budget$Year &gt;= 1950, ] budget_plt &lt;- ggplot(data = df, aes(x = Year, y = SurpDef_pg)) + geom_line() + geom_hline(yintercept = 0) + #deficit ribbon below theme_bw() + ylab(&quot;Surplus or Deficit (% of GDP)&quot;) + ggtitle(&quot;US Federal Budget (1950 - 2018) &quot;) + theme(panel.grid.minor = element_blank(), axis.text.x = element_text(angle = 90), plot.title = element_text(size = 20, face = &quot;bold&quot;, hjust = 0.5), legend.title = element_blank()) budget_plt The filled-in regions are added using the geom_ribbon geometry. budget_plt &lt;- budget_plt + geom_ribbon(aes(ymin = ifelse(SurpDef_pg &lt; 0, SurpDef_pg, 0), ymax = 0, fill = &quot;Deficit&quot;), alpha = 0.2) + geom_ribbon(aes(ymin = 0, ymax = ifelse(SurpDef_pg &gt; 0, SurpDef_pg, 0), fill = &quot;Surplus&quot;), alpha = 0.2) budget_plt Alternatively, all the code for the entire plot is shown below. budget_plt &lt;- ggplot(data = df, aes(x = Year, y = SurpDef_pg)) + geom_line() + geom_hline(yintercept = 0) + #deficit ribbon below theme_bw() + ylab(&quot;Surplus or Deficit (% of GDP)&quot;) + ggtitle(&quot;US Federal Budget (1950 - 2018) &quot;) + theme(panel.grid.minor = element_blank(), axis.text.x = element_text(angle = 90), plot.title = element_text(size = 20, face = &quot;bold&quot;, hjust = 0.5), legend.title = element_blank()) + geom_ribbon(aes(ymin = ifelse(SurpDef_pg &lt; 0, SurpDef_pg, 0), ymax = 0, fill = &quot;Deficit&quot;), alpha = 0.2) + geom_ribbon(aes(ymin = 0, ymax = ifelse(SurpDef_pg &gt; 0, SurpDef_pg, 0), fill = &quot;Surplus&quot;), alpha = 0.2) "],
["atp.html", "2 Year History of Top-ranked ATP Players", " 2 Year History of Top-ranked ATP Players Data For this plot, we will use the atp_rankings data frame of the gcubed package. head(atp_rankings) ## # A tibble: 6 x 6 ## Year Month Day Singles Player Date ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;chr&gt; &lt;dttm&gt; ## 1 2017 8 7 5 Djokovic 2017-08-07 12:00:00 ## 2 2017 8 7 2 Nadal 2017-08-07 12:00:00 ## 3 2017 8 7 3 Federer 2017-08-07 12:00:00 ## 4 2017 8 7 7 Thiem 2017-08-07 12:00:00 ## 5 2017 8 7 168 Tsitsipas 2017-08-07 12:00:00 ## 6 2017 8 14 5 Djokovic 2017-08-14 12:00:00 First, create a new variable, Ranking that preserves the rankings when the player is in the top 10. When the player is not in the top 10, the new variable is set to: 11 if the player is in the top 20; 12 if the player is ranked between 21 and 50 (inclusive); 13 if the player is ranked between 51 and 100 (inclusive); 14 if the player is ranked lower than 100. Also, we create a variable Change to be used later to identify the points in time when the players’ rankings changed. rankings &lt;- mutate(atp_rankings, Ranking = ifelse(Singles &gt; 100, 14, ifelse(Singles &gt; 50, 13, ifelse(Singles &gt; 20, 12, ifelse(Singles &gt; 10, 11, Singles))))) %&gt;% group_by(Player) %&gt;% mutate(Change = c(0,diff(Ranking))) %&gt;% ungroup() Code for plot ylabels &lt;- c(1:10, &quot;Top 20&quot;, &quot;Top 50&quot;, &quot;Top 100&quot;, &quot;Out of Top 100&quot;) show_date &lt;- ISOdate(2019, 11,1) begin_date &lt;- ISOdate(2017, 8, 7) next_date &lt;- ISOdate(2019, 8, 15) atp_plt &lt;- ggplot(data = rankings, aes(x = Date, y = Ranking, group = Player)) + geom_line(aes(color = Player), alpha = 0.4, size = 1.5) + scale_y_continuous(breaks = c(1:14), labels = ylabels, trans = &quot;reverse&quot;) + ggtitle(&quot;2 Year History of Top Ranked ATP Players&quot;) + xlim(c(begin_date, show_date)) + theme_bw() atp_plt Next, we can change the overall look of the plot using the theme function to change several details of the graph. atp_plt &lt;- atp_plt + theme(panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(), panel.grid.minor.x = element_blank(), axis.ticks = element_blank(), legend.position = &quot;none&quot;, panel.border = element_blank(), axis.title.x = element_blank(), axis.title.y = element_blank(), plot.title = element_text(size = 16, face = &quot;bold&quot;, hjust = 0.5)) atp_plt Adding some points to signify the times at which the players’ rankings changed using geom_point. We are going to use two geom_point geometries to create a smaller white circle inside the coloured larger circles. changes &lt;- filter(rankings, Change != 0) atp_plt &lt;- atp_plt + geom_point(data = changes, aes(x = Date, y = Ranking, color = Player)) + geom_point(data = changes, color = &quot;#FFFFFF&quot;, size = 0.25) atp_plt Now to add the annotation of the players’ names using geom_text. last_rankings &lt;- rankings %&gt;% top_n(5, Date) last_rankings$nextd &lt;- next_date atp_plt &lt;- atp_plt + geom_text(data = last_rankings, aes(label = Player, x = nextd, colour = Player) , hjust = 0, fontface = &quot;bold&quot;, size = 4) atp_plt The complete code for the plot: atp_plt &lt;- ggplot(data = rankings, aes(x = Date, y = Ranking, group = Player)) + geom_line(aes(color = Player), alpha = 0.4, size = 1.5) + scale_y_continuous(breaks = c(1:14), labels = ylabels, trans = &quot;reverse&quot;) + ggtitle(&quot;2 Year History of Top Ranked ATP Players&quot;) + xlim(c(begin_date, show_date)) + theme_bw() + theme(panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(), panel.grid.minor.x = element_blank(), axis.ticks = element_blank(), legend.position = &quot;none&quot;, panel.border = element_blank(), axis.title.x = element_blank(), axis.title.y = element_blank(), plot.title = element_text(size = 16, face = &quot;bold&quot;, hjust = 0.5)) + geom_point(data = changes, aes(x = Date, y = Ranking, color = Player)) + geom_point(data = changes, color = &quot;#FFFFFF&quot;, size = 0.25) + geom_text(data = last_rankings, aes(label = Player, x = nextd, colour = Player) , hjust = 0, fontface = &quot;bold&quot;, size = 4) atp_plt "],
["wta.html", "2 Year History of Top-ranked WTA Players", " 2 Year History of Top-ranked WTA Players Data For this plot, we will use the wta_rankings data frame of the gcubed package. head(wta_rankings) ## # A tibble: 6 x 6 ## Month Day Year Singles Player Date ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;chr&gt; &lt;dttm&gt; ## 1 8 7 2017 58 Barty 2017-08-07 12:00:00 ## 2 8 7 2017 50 Osaka 2017-08-07 12:00:00 ## 3 8 7 2017 1 Pliskova 2017-08-07 12:00:00 ## 4 8 7 2017 2 Halep 2017-08-07 12:00:00 ## 5 8 7 2017 27 Bertens 2017-08-07 12:00:00 ## 6 8 14 2017 48 Barty 2017-08-14 12:00:00 First, create a new variable, Ranking that preserves the rankings when the player is in the top 10. When the player is not in the top 10, the new variable is set to: 11 if the player is in the top 20; 12 if the player is ranked between 21 and 50 (inclusive); 13 if the player is ranked between 51 and 100 (inclusive); 14 if the player is ranked lower than 100. Also, we create a variable Change to be used later to identify the points in time when the players’ rankings changed. rankings &lt;- mutate(wta_rankings, Ranking = ifelse(Singles &gt; 100, 14, ifelse(Singles &gt; 50, 13, ifelse(Singles &gt; 20, 12, ifelse(Singles &gt; 10, 11, Singles))))) %&gt;% group_by(Player) %&gt;% mutate(Change = c(0,diff(Ranking))) %&gt;% ungroup() Code for plot ylabels &lt;- c(1:10, &quot;Top 20&quot;, &quot;Top 50&quot;, &quot;Top 100&quot;, &quot;Out of Top 100&quot;) show_date &lt;- ISOdate(2019, 11,1) begin_date &lt;- ISOdate(2017, 8, 7) next_date &lt;- ISOdate(2019, 8, 15) wta_plt &lt;- ggplot(data = rankings, aes(x = Date, y = Ranking, group = Player)) + geom_line(aes(color = Player), alpha = 0.4, size = 1.5) + scale_y_continuous(breaks = c(1:14), labels = ylabels, trans = &quot;reverse&quot;) + ggtitle(&quot;2 Year History of Top Ranked WTA Players&quot;) + xlim(c(begin_date, show_date)) + theme_bw() wta_plt Next, we can change the overall look of the plot using the theme function to change several details of the graph. wta_plt &lt;- wta_plt + theme(panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(), panel.grid.minor.x = element_blank(), axis.ticks = element_blank(), legend.position = &quot;none&quot;, panel.border = element_blank(), axis.title.x = element_blank(), axis.title.y = element_blank(), plot.title = element_text(size = 16, face = &quot;bold&quot;, hjust = 0.5)) wta_plt Adding some points to signify the times at which the players’ rankings changed using geom_point. We are going to use two geom_point geometries to create a smaller white circle inside the coloured larger circles. changes &lt;- filter(rankings, Change != 0) wta_plt &lt;- wta_plt + geom_point(data = changes, aes(x = Date, y = Ranking, color = Player)) + geom_point(data = changes, color = &quot;#FFFFFF&quot;, size = 0.25) wta_plt Now to add the annotation of the players’ names using geom_text. last_rankings &lt;- rankings %&gt;% top_n(5, Date) last_rankings$nextd &lt;- next_date wta_plt &lt;- wta_plt + geom_text(data = last_rankings, aes(label = Player, x = nextd, colour = Player) , hjust = 0, fontface = &quot;bold&quot;, size = 4) wta_plt The complete code for the plot: wta_plt &lt;- ggplot(data = rankings, aes(x = Date, y = Ranking, group = Player)) + geom_line(aes(color = Player), alpha = 0.4, size = 1.5) + scale_y_continuous(breaks = c(1:14), labels = ylabels, trans = &quot;reverse&quot;) + ggtitle(&quot;2 Year History of Top Ranked WTA Players&quot;) + xlim(c(begin_date, show_date)) + theme_bw() + theme(panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(), panel.grid.minor.x = element_blank(), axis.ticks = element_blank(), legend.position = &quot;none&quot;, panel.border = element_blank(), axis.title.x = element_blank(), axis.title.y = element_blank(), plot.title = element_text(size = 16, face = &quot;bold&quot;, hjust = 0.5)) + geom_point(data = changes, aes(x = Date, y = Ranking, color = Player)) + geom_point(data = changes, color = &quot;#FFFFFF&quot;, size = 0.25) + geom_text(data = last_rankings, aes(label = Player, x = nextd, colour = Player) , hjust = 0, fontface = &quot;bold&quot;, size = 4) wta_plt "],
["sp.html", "S&amp;P 500 daily returns in 2018", " S&amp;P 500 daily returns in 2018 Data This plot uses the sp500 data frame of the gcubed package. tail(sp500) ## # A tibble: 6 x 7 ## Month Day Year Open Close PrevClose daily_return ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 12 21 2018 2465. 2417. 2467. -2.06 ## 2 12 24 2018 2401. 2351. 2417. -2.71 ## 3 12 26 2018 2363. 2468. 2351. 4.96 ## 4 12 27 2018 2442. 2489. 2468. 0.856 ## 5 12 28 2018 2499. 2486. 2489. -0.124 ## 6 12 31 2018 2499. 2507. 2486. 0.849 First, we will restrict the data to only those entries from the year 2018. Then we will create a new column, updown that will simply say whether or not each day’s return represented a gain or a loss. This will be used later to colour the bars of the plot. Code for plot We will use the geom_bar geometry to create this plot. The fill aesthetic_ will be used to colour the bars appropriately for positive and negative daily returns. library(ggplot2) sp18_plt &lt;- ggplot(data = sp18, aes(x = Date, y = daily_return, fill = updown )) + geom_bar(stat = &quot;identity&quot;) + ylab(&quot;Daily Returns (% of Prev Close)&quot;)+ guides(fill = guide_legend(override.aes= list(alpha = 0.2))) + ggtitle(&quot;S&amp;P 500 Daily Returns (2018) &quot;) + theme(plot.title = element_text(size = 16, face = &quot;bold&quot;, hjust = 0.5), panel.background = element_blank(), axis.title.x=element_blank(), legend.position = &quot;none&quot;) + scale_fill_manual(values = c(&quot;blue&quot;, &quot;red&quot;)) sp18_plt "],
["spfour.html", "S&amp;P 500 daily returns 2015 - 2018", " S&amp;P 500 daily returns 2015 - 2018 Data This plot uses the sp500 data frame of the gcubed package. Rows 250, 500, 750 and 1000 of the data frame are shown below. sp500[c(250,500,750,1000),] ## # A tibble: 4 x 7 ## Month Day Year Open Close PrevClose daily_return ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 12 29 2015 2061. 2078. 2056. 1.06 ## 2 12 23 2016 2260. 2264. 2261. 0.125 ## 3 12 21 2017 2683. 2685. 2679. 0.199 ## 4 12 20 2018 2497. 2467. 2507. -1.58 First, we will restrict the data to only those entries from the year 2018. Then we will create a new column, updown that will simply say whether or not each day’s return represented a gain or a loss. This will be used later to colour the bars of the plot. ## # A tibble: 4 x 8 ## Month Day Year Open Close PrevClose daily_return MonthDay ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 12 29 2015 2061. 2078. 2056. 1.06 12-29 ## 2 12 23 2016 2260. 2264. 2261. 0.125 12-23 ## 3 12 21 2017 2683. 2685. 2679. 0.199 12-21 ## 4 5 27 2015 2105. 2123. 2104. 0.916 05-27 Code for plot We will use the geom_bar geometry to create this plot. The fill aesthetic_ will be used to colour the bars appropriately for positive and negative daily returns. sp_plt &lt;- ggplot(data = df, aes(x = MonthDay, y = daily_return)) + geom_bar(stat = &quot;identity&quot;) + facet_wrap(~Year) + ylab(&quot;Daily Returns (% of Prev Close)&quot;) + ggtitle(&quot;S&amp;P 500 Daily Returns (2015 - 2018)&quot;) sp_plt At present the x-axis labels are from a categorical variable, MonthDay. The hundreds of overlapping values being displayed can be removed to de-clutter the lower portion of the plot. sp_plt &lt;- sp_plt + theme(plot.title = element_text(size = 16, face = &quot;bold&quot;, hjust = 0.5), panel.background = element_blank(), axis.title.x=element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank()) sp_plt To add bands representing 95th and 99th percentile moves, first we use determine what the 95th and 99th percentile moves are. df$abs_return &lt;- abs(df$daily_return) head(df) ## # A tibble: 6 x 9 ## Month Day Year Open Close PrevClose daily_return MonthDay abs_return ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 2 2015 2059. 2058. 2059. -0.0340 01-02 0.0340 ## 2 1 5 2015 2054. 2021. 2058. -1.83 01-05 1.83 ## 3 1 6 2015 2022. 2003. 2021. -0.889 01-06 0.889 ## 4 1 7 2015 2006. 2026. 2003. 1.16 01-07 1.16 ## 5 1 8 2015 2031. 2062. 2026. 1.79 01-08 1.79 ## 6 1 9 2015 2063. 2045. 2062. -0.840 01-09 0.840 pct95 &lt;- quantile(df$abs_return, .95) pct95 ## 95% ## 1.817147 pct99 &lt;- quantile(df$abs_return, .99) pct99 ## 99% ## 2.945549 The bands can be added using annotate to create the ribbons. sp_plt &lt;- sp_plt + annotate(&quot;ribbon&quot;, ymin = pct95, ymax = pct99, x = c(-Inf,Inf), alpha = 0.3, fill = &quot;95&quot;) + annotate(&quot;ribbon&quot;, ymin = pct99, ymax = Inf, x = c(-Inf, Inf), alpha = 0.3, fill = &quot;99&quot;) + annotate(&quot;ribbon&quot;, ymax = -pct95, ymin = -pct99, x = c(-Inf,Inf), alpha = 0.3, fill = &quot;95&quot;) + annotate(&quot;ribbon&quot;, ymax = -pct99, ymin = -Inf, x = c(-Inf, Inf), alpha = 0.3, fill = &quot;99&quot;) sp_plt To add the text, annotate can be used again. This time with the geom argument set to “text”. sp_plt &lt;- sp_plt + annotate(&quot;text&quot;, label = &quot;95th percentile&quot;, y = (pct95+pct99)/2, x = &quot;06-01&quot; ) + annotate(&quot;text&quot;, label = &quot;99th percentile&quot;, y = pct99 + (pct99-pct95)/2, x = &quot;06-01&quot;) sp_plt The complete code for the plot sp_plt &lt;- ggplot(data = df, aes(x = MonthDay, y = daily_return)) + geom_bar(stat = &quot;identity&quot;) + facet_wrap(~Year) + ylab(&quot;Daily Returns (% of Prev Close)&quot;) + ggtitle(&quot;S&amp;P 500 Daily Returns (2015 - 2018)&quot;) + theme(plot.title = element_text(size = 16, face = &quot;bold&quot;, hjust = 0.5), panel.background = element_blank(), axis.title.x=element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank()) + annotate(&quot;ribbon&quot;, ymin = pct95, ymax = pct99, x = c(-Inf,Inf), alpha = 0.3, fill = &quot;95&quot;) + annotate(&quot;ribbon&quot;, ymin = pct99, ymax = Inf, x = c(-Inf, Inf), alpha = 0.3, fill = &quot;99&quot;) + annotate(&quot;ribbon&quot;, ymax = -pct95, ymin = -pct99, x = c(-Inf,Inf), alpha = 0.3, fill = &quot;95&quot;) + annotate(&quot;ribbon&quot;, ymax = -pct99, ymin = -Inf, x = c(-Inf, Inf), alpha = 0.3, fill = &quot;99&quot;) + annotate(&quot;text&quot;, label = &quot;95th percentile&quot;, y = (pct95+pct99)/2, x = &quot;06-01&quot; ) + annotate(&quot;text&quot;, label = &quot;99th percentile&quot;, y = pct99 + (pct99-pct95)/2, x = &quot;06-01&quot;) sp_plt "],
["tfwr.html", "World Record Progression", " World Record Progression Data This plot uses the wr data frame of the gcubed package. head(wr) ## # A tibble: 6 x 6 ## Event WR Athlete Location Date MF ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;date&gt; &lt;chr&gt; ## 1 100 M 9.58 Usain Bolt (Jamaica) Berlin, Germany 2009-08-16 M ## 2 200 M 19.19 Usain Bolt (Jamaica) Berlin, Germany 2009-08-20 M ## 3 400 M 43.03 Wayde van Niekerk (So… Rio de Janeiro,… 2016-08-14 M ## 4 800 M 01:40.9 David Rudisha (Kenya) London, England 2012-08-09 M ## 5 1500 M 03:26.0 Hicham El Guerrouj (M… Rome, Italy 1998-07-14 M ## 6 Steeple… 07:53.6 Saïf Shaheen (Qatar) Brussels, Belgi… 2004-09-03 M Code for plot This plot uses geom_segment geometry. library(ggplot2) library(dplyr) # used for arrange which sorts data by date today &lt;- as.Date(&quot;2019-08-08&quot;) wr &lt;- arrange(wr, desc(Date)) wr$Event &lt;- factor(wr$Event, levels = wr$Event) wr$MF2 &lt;- ifelse(wr$MF == &quot;M&quot;, &quot;Men&quot;, &quot;Women&quot;) wr_plt &lt;- ggplot(wr, aes(x = Date, y = Event)) + geom_segment(aes(x = Date, xend = today, y = Event, yend = Event, colour = MF2), size = 2) + ggtitle(&quot;Longevity of Current Track &amp; Field World Records&quot;) + theme_bw() + theme(legend.title = element_blank(), axis.title.y = element_blank(), plot.title = element_text(size = 16, face = &quot;bold&quot;, hjust = 0.5)) + xlab(&quot;Date Record Set&quot;) wr_plt "],
["lifeexcountries.html", "Life Expectancy for Selected Countries", " Life Expectancy for Selected Countries Data This plot uses the life_ex and regions data frames of the gcubed package. le &lt;- inner_join(life_ex, regions, by = c(&quot;Entity&quot; = &quot;country&quot;)) %&gt;% filter(Year == 1950 | Year == 2015) library(dplyr) income_levels &lt;- c(&quot;Low income&quot;, &quot;Lower middle income&quot;, &quot;Upper middle income&quot;, &quot;High income&quot;) le$incomegroup &lt;- factor(le$incomegroup, levels = income_levels) le &lt;- le %&gt;% spread(key = Year, value = LE) %&gt;% arrange(incomegroup, Entity) country_levels &lt;- le$Entity le$country &lt;- factor(le$Entity, levels = country_levels) le_plt &lt;- ggplot() + geom_segment(data=le, mapping=aes(x=country, xend=country, y = `1950`, yend=`2015`) ) + geom_point(data = le, aes(x = country, y = `1950`, colour = &quot;1950&quot;)) + geom_point(data = le, aes(x = country, y = `2015`, colour = &quot;2015&quot;)) + theme_bw() + scale_x_discrete(labels=country_levels)+ ylab(&quot;Life Expectancy (years)&quot;) + ggtitle(&quot;Global Life Expectancy (1950 - 2015)&quot;) + scale_colour_manual(values = c(&quot;grey&quot;, &quot;royalblue&quot;), name = &quot;&quot;) le_plt le_plt &lt;- le_plt + theme(axis.title.x=element_blank(), axis.text.x = element_text(hjust = 1, angle = 90, vjust=0.1), axis.ticks.y = element_blank(), panel.grid.minor.y = element_blank(), legend.title = element_blank(), plot.title = element_text(size = 16, face = &quot;bold&quot;, hjust = 0.5)) le_plt cumsum(table(le$incomegroup)) ## Low income Lower middle income Upper middle income ## 7 26 50 ## High income ## 90 Adding dividing lines between the income groups using geom_vline: le_plt &lt;- le_plt + geom_vline(xintercept = 7.5, linetype = &quot;dashed&quot;, colour = &quot;grey&quot;) + geom_vline(xintercept = 26.5, linetype = &quot;dashed&quot;, colour = &quot;grey&quot;) + geom_vline(xintercept = 50.5, linetype = &quot;dashed&quot;, colour = &quot;grey&quot;) le_plt Adding the text for the income groups using geom_text: le_plt &lt;- le_plt + geom_text(aes(4,87,label = &quot;Low Income&quot;), colour = &quot;red&quot;) + geom_text(aes(15,87,label = &quot;Lower middle income&quot;), colour = &quot;red&quot;) + geom_text(aes(35,87,label = &quot;Upper middle income&quot;), colour = &quot;red&quot;) + geom_text(aes(60,87,label = &quot;High income&quot;), colour = &quot;red&quot;) le_plt "],
["metsbar.html", "NY Mets 2019 Season", " NY Mets 2019 Season Data This plot uses the nym data frame of the gcubed package. head(nym) ## # A tibble: 6 x 24 ## `Gm#` Weekday Month Day Tm X5 Opp WL wo R RA Inn ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 Thursd… Mar 28 NYM @ WSN W &lt;NA&gt; 2 0 NA ## 2 2 Saturd… Mar 30 NYM @ WSN W &lt;NA&gt; 11 8 NA ## 3 3 Sunday Mar 31 NYM @ WSN L wo 5 6 NA ## 4 4 Monday Apr 1 NYM @ MIA W &lt;NA&gt; 7 3 NA ## 5 5 Tuesday Apr 2 NYM @ MIA W &lt;NA&gt; 6 5 NA ## 6 6 Wednes… Apr 3 NYM @ MIA W &lt;NA&gt; 6 4 NA ## # … with 12 more variables: `W-L` &lt;chr&gt;, Rank &lt;dbl&gt;, GB &lt;chr&gt;, Win &lt;chr&gt;, ## # Loss &lt;chr&gt;, Save &lt;chr&gt;, Time &lt;drtn&gt;, `D/N` &lt;chr&gt;, Attendance &lt;dbl&gt;, ## # Streak &lt;chr&gt;, `Orig. Scheduled` &lt;lgl&gt;, HomeAway &lt;chr&gt; Code for plot mets_plt &lt;- ggplot(nym, aes(x = `Gm#`, y = ifelse(WL == &quot;W&quot;, 1,-1), fill = WL) ) + geom_bar(stat = &quot;identity&quot;) + scale_fill_manual(values = c(&quot;#FF5910&quot;, &quot;#002D72&quot;)) + xlab(&quot;Game #&quot;) + ggtitle(&quot;NY Mets Season Results (2019&quot;) + theme(panel.background = element_blank(), axis.title.y = element_blank(), legend.title = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank(), plot.title = element_text(size = 16, face = &quot;bold&quot;, hjust = 0.5)) + guides(fill = guide_legend(reverse=TRUE)) mets_plt "],
["nleastbars.html", "NL East 2019 Season Records", " NL East 2019 Season Records Data This plot uses the atl, phi, was, nym and mia data frames of the gcubed package. nleast &lt;- bind_rows(atl, phi, was, nym, mia) Code nleast$Tm &lt;- factor(nleast$Tm, levels = c(&quot;ATL&quot;, &quot;WSN&quot;, &quot;PHI&quot;, &quot;NYM&quot;, &quot;MIA&quot;)) nlplot &lt;- ggplot(data = nleast, aes(x = `Gm#`, y = win_updown, fill = factor(WL, levels = c(&quot;W&quot;, &quot;L&quot;)))) + geom_bar(stat = &quot;identity&quot;) + facet_wrap(~Tm, ncol = 1) + scale_fill_manual(values = c(&quot;royalblue&quot;, &quot;peachpuff&quot;), name = &quot;&quot;) + theme_bw() + ggtitle(&quot;NL East 2019&quot;) + xlab(&quot;Game #&quot;) + theme(axis.title.y=element_blank(), #axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), plot.title = element_text(size = 16, face = &quot;bold&quot;, hjust = 0.5)) nlplot "],
["nleastgamesabove.html", "NL East Teams Games above .500 in 2019", " NL East Teams Games above .500 in 2019 Data nleast &lt;- bind_rows(atl, phi, was, nym, mia) Code Month = c(&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;) month_num_table &lt;- data.frame(Month, MonthNum = 1:12) nleast &lt;- separate(nleast, Date, into = c(&quot;WeekDay&quot;, &quot;Month&quot;, &quot;Day&quot;), sep = &quot; &quot;) %&gt;% mutate(Day = as.integer(Day)) ## Warning: Expected 3 pieces. Additional pieces discarded in 14 rows [19, 20, ## 191, 192, 308, 309, 336, 337, 418, 419, 464, 465, 579, 580]. nleast &lt;- left_join(nleast, month_num_table, by = &quot;Month&quot;) %&gt;% mutate(MonthNum = sprintf(&quot;%02d&quot;, as.numeric(MonthNum)), Day = sprintf(&quot;%02d&quot;, as.numeric(Day)), MonthDay = paste(MonthNum, Day, sep = &quot;-&quot;)) %&gt;% arrange(MonthDay) ## Warning: Column `Month` joining character vector and factor, coercing into ## character vector nleast$MonthDay &lt;- factor(nleast$MonthDay) games_500_plot &lt;- ggplot(data = nleast, aes(x = MonthDay, y = games_updown, group = Tm, colour = Tm)) + geom_step() + theme_bw() + geom_vline(xintercept = 5, linetype = &quot;dashed&quot;, colour = &quot;grey&quot;) + geom_vline(xintercept = 35, linetype = &quot;dashed&quot;, colour = &quot;grey&quot;) + geom_vline(xintercept = 66, linetype = &quot;dashed&quot;, colour = &quot;grey&quot;) + geom_vline(xintercept = 96, linetype = &quot;dashed&quot;, colour = &quot;grey&quot;) + geom_vline(xintercept = 122, linetype = &quot;dashed&quot;, colour = &quot;grey&quot;) + geom_text(aes(10,22,label = &quot;April&quot;), colour = &quot;grey&quot;) + geom_text(aes(40,22,label = &quot;May&quot;), colour = &quot;grey&quot;) + geom_text(aes(71,22,label = &quot;June&quot;), colour = &quot;grey&quot;) + geom_text(aes(101,22,label = &quot;July&quot;), colour = &quot;grey&quot;) + ylab(&quot;Games above .500&quot;) + ggtitle(&quot;NL East 2019&quot;) + theme(axis.title.x=element_blank(), axis.ticks.x = element_blank(), axis.text.x = element_blank(), axis.ticks.y = element_blank(), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), legend.title = element_blank(), plot.title = element_text(size = 16, face = &quot;bold&quot;, hjust = 0.5)) games_500_plot "],
["chihist.html", "Chicago Employee Salaries", " Chicago Employee Salaries Data This plot uses the chi_emps data frame of the gcubed package. df &lt;- filter(chi_emps, SalHour == &quot;Salary&quot;) Code for plot ggsave(&quot;images/ChicagoEmployeeSalariesHist.png&quot;, chi_emps_hist, width = 7, height = 7) "],
["comphists.html", "Chicago Histograms Faceted", " Chicago Histograms Faceted Data This plot uses the chi_emps data frame from package gcubed. First, find the 3 departments with the most salaried employees. df &lt;- filter(chi_emps, SalHour == &quot;Salary&quot;) large_dept_names &lt;- names(sort(table(df$Department), decreasing = TRUE))[1:3] large_dept_names ## [1] &quot;POLICE&quot; &quot;FIRE&quot; &quot;OEMC&quot; large_depts &lt;- chicago_salaries[chicago_salaries$Department %in% large_dept_names, ] head(large_depts) ## # A tibble: 6 x 4 ## Name Titles Department AnnualSalary ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 AARON, JEFFERY M SERGEANT POLICE 101442 ## 2 AARON, KARINA POLICE OFFICER (ASSIGNED AS D… POLICE 94122 ## 3 ABARCA, FRANCES J POLICE OFFICER POLICE 48078 ## 4 ABBATEMARCO, JAM… FIRE ENGINEER-EMT FIRE 103350 ## 5 ABBATE, TERRY M POLICE OFFICER POLICE 93354 ## 6 ABBOTT, CARMELLA POLICE OFFICER POLICE 68616 Code for plot chi_comp_plt &lt;- ggplot(large_depts, aes(x = AnnualSalary, fill = Department)) + geom_histogram(bins = 50, colour = &quot;black&quot;) + facet_wrap(~Department, ncol = 1, scales = &quot;free_y&quot;) + theme_bw() + scale_x_continuous(label = comma) + scale_y_continuous(label = comma) + xlab(&quot;Annual Salary ($)&quot;) + ylab(&quot;# of Employees&quot;) + ggtitle(&quot;Annual Salaries of Chicago City Employees (2019)&quot;) + theme(legend.position = &quot;none&quot;, plot.title = element_text(size = 16, face = &quot;bold&quot;, hjust = 0.5)) chi_comp_plt "],
["nhanes.html", "Histogram of NHANES", " Histogram of NHANES library(NHANES) NHANES_adults &lt;- filter(NHANES, Age &gt;= 18) NHANES_bg &lt;- select(NHANES_adults, -Gender) nhanes_height_plot &lt;- ggplot(data = NHANES_adults, aes(x = Height)) + geom_histogram(data = NHANES_bg, fill = &quot;grey&quot;, alpha = .4) + geom_histogram(mapping = aes(fill = Gender), colour = &quot;black&quot;) + facet_wrap(~ Gender, ncol = 1) + guides(fill = FALSE) + # to remove the legend theme_bw() + xlab(&quot;Height (cm)&quot;) + ggtitle(&quot;Heights of Surveyed US Adults (2009 - 2012)&quot;) + theme(panel.grid.minor = element_blank(), plot.title = element_text(size = 18, face = &quot;bold&quot;, hjust = 0.5)) nhanes_height_plot ## Warning: Removed 114 rows containing non-finite values (stat_bin). ## Warning: Removed 57 rows containing non-finite values (stat_bin). "],
["chibox.html", "Chicago Employee Salary Box plot", " Chicago Employee Salary Box plot dept_counts &lt;- table(chi_emps$Department) large_dept_counts &lt;- dept_counts[dept_counts &gt;= 500 ] large_dept_names &lt;- names(large_dept_counts) large_depts &lt;- chi_emps[chi_emps$Department %in% large_dept_names &amp; chi_emps$SalHour == &quot;Salary&quot;, ] sorted_depts &lt;- group_by(large_depts, Department) %&gt;% summarise(MedSal = median(AnnualSalary)) %&gt;% arrange(MedSal) large_depts$Department &lt;- factor(large_depts$Department, levels = sorted_depts$Department) chi_dept500_boxplot &lt;- ggplot(data = large_depts, aes(x = Department, y = AnnualSalary)) + geom_boxplot() + ggtitle(&quot;Salaries of Chicago City Govt Employees&quot;) + theme(plot.title = element_text(size = 16, face = &quot;bold&quot;, hjust = 0.5), axis.text.x = element_text(angle = 90), axis.title.x=element_blank()) + ylab(&quot;Annual Salary ($)&quot;) + scale_y_continuous(label = comma) chi_dept500_boxplot "],
["chiridges.html", "Chicago City Salaries Compared: Density Ridges", " Chicago City Salaries Compared: Density Ridges df &lt;- chicago_salaries dept_counts &lt;- table(df$Department) large_dept_names &lt;- names(dept_counts[dept_counts &gt; 500]) large_dept_names ## [1] &quot;AVIATION&quot; &quot;FINANCE&quot; &quot;FIRE&quot; &quot;OEMC&quot; ## [5] &quot;POLICE&quot; &quot;PUBLIC LIBRARY&quot; df$Dept &lt;- ifelse(df$Department %in% large_dept_names, df$Department, &quot;OTHER&quot;) table(df$Dept) ## ## AVIATION FINANCE FIRE OEMC OTHER ## 583 534 4631 799 4432 ## POLICE PUBLIC LIBRARY ## 14060 702 dept_levels &lt;- c(&quot;OTHER&quot;, rev(large_dept_names)) df$Dept &lt;- factor(df$Dept, levels = dept_levels) library(ggridges) chi_ridge_plt &lt;- ggplot(data = df, aes(x = AnnualSalary, y = Dept)) + geom_density_ridges() + scale_x_continuous(label=comma) + ggtitle(&quot;Annual Salaries of Chicago City Employees (2019)&quot;) + theme(plot.title = element_text(size = 16, face = &quot;bold&quot;, hjust = 0.5)) chi_ridge_plt "]
]
